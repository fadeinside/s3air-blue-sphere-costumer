// - - - - - - - - - - - - - - - - - - - //
// Ground render stuff			  //
// - - - - - - - - - - - - - - - - - - - //

//@ Function taken from sonic3air_dev/scripts/level/special/bluespheres.lemon
function void BlueSpheres.renderCustomGround()
{
	// Disable rendering of plane B prio
	Renderer.enableDefaultPlane(0x03, false)
	
	// Render default HUD part
	SpheresModSupport.renderHUDPlane()
	
	// Render ground glow effect
	SpheresModSupport.renderGroundHorizont()
	
	// Render our own version of the ground
	SpheresModSupport.renderCustomGround()
}

//? Manually render the HUD parts of this plane.
function void SpheresModSupport.renderHUDPlane()
{
	// We will draw this only if your mod does not have display HUD sprites
	if !(Renderer.hasCustomSprite("display_hud_bluecounter") && Renderer.hasCustomSprite("display_hud_ringscounter") && SpheresModSupport.hasDigitSprites())
	{
		// If the counter sprite does not exist, then draw it completely, if it exists, then only a fragment with numbers
		if !(Renderer.hasCustomSprite("display_hud_bluecounter") && Renderer.hasCustomSprite("display_hud_ringscounter"))
		{
			Renderer.setupPlane(0x00, 0x00, 160, 32, 0x11, 0x03, 0x9ffe)
			Renderer.setupPlane(getScreenWidth() - 160, 0x00, 160, 32, 0x11, 0x03, 0x9ffe)
		}
		else
		{
			Renderer.setupPlane(getScreenWidth() / 0x02 - 137, 13, 50, 14, 0x11, 0x03, 0x9ffe)
			Renderer.setupPlane(getScreenWidth() / 0x02 + 87, 13, 50, 14, 0x11, 0x03, 0x9ffe)
		}
	}
}

//? Draw a custom ground horizont glow.
function void SpheresModSupport.renderGroundHorizont()
{
	// Setup variables
	s32 px = getScreenWidth() / 0x02
	s32 py = getScreenHeight() - 224
	
	// Smoothed horizon when using modern style
	if (Game.getSetting(SETTING_BS_VISUAL_STYLE) & 0x02)
	{
		// The horizon that will be displayed behind the ground in the background
		// Check if the custom sprite exist
		if (Renderer.hasCustomSprite("horizont_smooth_background"))
		{
			Renderer.drawCustomSprite("horizont_smooth_background", px, py - 0x08, 0x00, 0x00, 0x2000)
			Renderer.drawCustomSprite("horizont_smooth_background", px, py - 0x08, 0x00, SPRITE_FLAG_FLIP_X, 0x2000)
		}
		else // Render the original AIR sprite
		{
			Renderer.drawCustomSprite("bluespheres_glow_background", px, py + 20, 0x00, 0x00, 0x2000)
		}
		
		// Horizon that will be displayed only on the ground
		// Check if the custom sprite exist
		if (Renderer.hasCustomSprite("horizont_smooth_foreground"))
		{
			Renderer.drawCustomSprite("horizont_smooth_foreground", px, py + 0x1e, 0x00, 0x00, 0x3100)
			Renderer.drawCustomSprite("horizont_smooth_foreground", px, py + 0x1e, 0x00, SPRITE_FLAG_FLIP_X, 0x3100)
		}
		else // Render the original AIR sprite
		{
			Renderer.drawCustomSprite("bluespheres_glow_foreground", px, py + 0x1e, 0x00, 0x00, 0x3100)
		}
	}
	// Sharped horizont when using classic style
	else
	{
		// The horizon that will be displayed behind the ground in the background
		// Check if the custom sprite exist
		if (Renderer.hasCustomSprite("horizont_sharp_background"))
		{
			Renderer.drawCustomSprite("horizont_sharp_background", px, py - 0x08, 0x00, 0x00, 0x2000)
			Renderer.drawCustomSprite("horizont_sharp_background", px, py - 0x08, 0x00, SPRITE_FLAG_FLIP_X, 0x2000)
		}
		
		// Horizon that will be displayed only on the ground
		// Check if the custom sprite exist
		if (Renderer.hasCustomSprite("horizont_sharp_foreground"))
		{
			Renderer.drawCustomSprite("horizont_sharp_foreground", px, py + 0x1e, 0x00, 0x00, 0x3100)
			Renderer.drawCustomSprite("horizont_sharp_foreground", px, py + 0x1e, 0x00, SPRITE_FLAG_FLIP_X, 0x3100)
		}
	}
}

//? Draw a custom ground.
function void SpheresModSupport.renderCustomGround()
{
	// Render our own version of the ground
	// -> This only works in combination with a palette set in V-Int, see "fn000c50"
	
	string spriteKey1
	string spriteKey2
	
	Game.setupBlueSpheresGroundSprites()
	
	u16 px = bluespheres.position.x
	u16 py = bluespheres.position.y
	
	u8 rotation = bluespheres.direction
	bool isRotating = (rotation & 0x3f) != 0x00
	
	if (isRotating || (rotation & 0x40) == 0x00)
		px = (px + 0x80) & 0xff00
	if (isRotating || (rotation & 0x40) != 0x00)
		py = (py + 0x80) & 0xff00
	
	if (isRotating)
	{
		u8 rotationStep = (rotation & 0x3f) / 0x04
		
		spriteKey1 = stringformat("bluespheres_ground_alpha_rotation_0x%02x", rotationStep)
		spriteKey2 = stringformat("bluespheres_ground_opaque_rotation_0x%02x", rotationStep)
	}
	else
	{
		u8 movementStep = 0x00
		
		if ((rotation & 0x80) == 0x00)
			movementStep = (0xff - ((rotation & 0x40) ? px : py) & 0xff) / 0x08
		else
			movementStep = (((rotation & 0x40) ? px : py) & 0xff) / 0x08
		
		spriteKey1 = stringformat("bluespheres_ground_alpha_movement_0x%02x", movementStep)
		spriteKey2 = stringformat("bluespheres_ground_opaque_movement_0x%02x", movementStep)
	}
	
	Renderer.drawSprite(spriteKey1, 0x00, 0x00, 0x100, 0x00, 0x3000)
	Renderer.drawSprite(spriteKey2, 0x00, 0x00, 0x100, 0x10, 0x3000)
}

// - - - - - - - - - - - - - - - - - - - //
// Custom character shadow	 //
// - - - - - - - - - - - - - - - - - - - //

//@ Function taken from sonic3air_dev/scripts/level/special/bluespheres.lemon
function void BlueSpheres.renderCustomCharacterShadows()
{
	// Setup variables
	s32 px = getScreenWidth() / 0x02
	s32 py = 0x94 + getScreenHeight() - 224
	
	// Smoothed character shadow when using modern style
	if (Game.getSetting(SETTING_BS_VISUAL_STYLE) & 0x02)
	{
		// Check if the custom sprite exist
		if (Renderer.hasCustomSprite(getNumPlayers() < 0x02 ? "player_shadow_1P_smooth" : "player_shadow_2P_smooth"))
			Renderer.drawCustomSprite(getNumPlayers() < 0x02 ? "player_shadow_1P_smooth" : "player_shadow_2P_smooth", px, py, 0x00, 0x00, 0x3100)
		else // Render the original AIR sprite
			Renderer.drawCustomSprite(getNumPlayers() < 0x02 ? "bluespheres_shadow_1P_smooth" : "bluespheres_shadow_2P_smooth", 143 + getScreenExtend(), py, 0x00, 0x00, 0x3100)
	}
	// Sharped character shadow when using classic style
	else
	{
		// Check if the custom sprite exist
		if (Renderer.hasCustomSprite(getNumPlayers() < 0x02 ? "player_shadow_1P_sharp" : "player_shadow_2P_sharp"))
			Renderer.drawCustomSprite(getNumPlayers() < 0x02 ? "player_shadow_1P_sharp" : "player_shadow_2P_sharp", px, py, 0x00, 0x00, 0x3100)
		else // Render the original AIR sprite
			Renderer.drawCustomSprite(getNumPlayers() < 0x02 ? "bluespheres_shadow_1P_pixel" : "bluespheres_shadow_2P_pixel", 143 + getScreenExtend(), py, 0x00, 0x00, 0x3100)
	}
}

// - - - - - - - - - - - - - - - - - - - //
// Custom spheres stuff			//
// - - - - - - - - - - - - - - - - - - - //

//@ Function taken from sonic3air_dev/scripts/level/special/bluespheres.lemon
function void BlueSpheres.renderCustomSpheres()
{
	u32 ptr = 0x800000
	Game.writeBlueSpheresData(ptr, 0xfffff100, bluespheres.position.x, bluespheres.position.y, bluespheres.direction)
	
	// Main loop
	u16 count = u16[ptr]
	ptr += 0x02
	for (u16 i = 0x00; i < count; ++i)
	{
		// Read sphere properties
		u16 px = u16[ptr] + getScreenExtend() - 0x28
		u16 py = u16[ptr + 0x02]
		u16 sphereDistance = u16[ptr + 0x04]
		u8 sphereID = u8[ptr + 0x06]
		ptr += 0x07
		
		// Get the size of the spheres, depending on its distance
		u8 sphereSize32 = SpheresModSupport.getSphereSize32(sphereDistance)
		u8 sphereSize16 = SpheresModSupport.getSphereSize16(sphereDistance)
		
		// Place the spheres correctly on the ground
		py -= (0x10 - sphereSize32 / 0x02) * 0x02 / 0x03 - (getScreenHeight() - 224) + 0x01
		// Lift all spheres when the stage is successfully completed
		py -= bluespheres.lifted_height
		
		// Setup advanced render properties
		bool behindHorizon = (sphereDistance < 0x1a10)
		u16 renderQueue = (behindHorizon ? 0x2000 : 0x9000) + sphereDistance / 0x200
		u8 alpha = SpheresModSupport.getOnCollectedAlpha(sphereID)
		u32 fog = clamp(s32(0x100000) / (sphereSize16 / 0x16), 0x00, 0x80) * 0x010101
		
		// Setup VDP properties
		D0.u16 = u8(sphereID) * 0x08
		if (sphereID > 0x0d)
			D0.u16 = 0x28
		A3 = u32[0xffffe480 + D0.s16]
		D6.u16 = u16[0xffffe480 + D0.s16 + 0x04]
		
		D0.u16 = u16[0xffffe480 + D0.s16 + 0x06]
		D1 = (D0.u16 & 0x8000) ? 0x00 : (sphereSize16 * 0x02)
		D1.u16 += D0.u16 * 0x02
		A3 += u16[A3 + D1.s16]

		D1.u16 = u16[A3] - 0x01
		A3 += 0x02
		
		// The main loop is responsible for the renderer
		while (D1.s16 >= 0x00)
		{
			// Call another function instead of defining the spheres in the loop. Compatibility Issue
			// Slight render optimization. Do not draw spheres if they are behind the screen
			if !(SETTING_BS_RENDER_OPTIMIZE && (py >= getScreenHeight() || px >= getScreenWidth() || px <= 0x00 || (sphereDistance < 6304)))
				SpheresModSupport.renderCustomSpheres(px, py, renderQueue, alpha, fog, sphereID, sphereSize32, sphereSize16)
			
			A3 += 0x06
			--D1.s16
		}
	}
}

//? Draw a custom spheres.
function void SpheresModSupport.renderCustomSpheres(u16 px, u16 py, u16 renderQueue, u8 alpha, u32 fog, u8 sphereID, u8 sphereSize32, u8 sphereSize16)
{
	string key
	
	// Red sphere
	if (sphereID == 0x01 && Renderer.hasCustomSprite(stringformat("sphere_red_size_%d", sphereSize16)))
	{
		key = stringformat("sphere_red_size_%d", sphereSize16)
	}
	// Blue sphere (0x0a when it's in a touch state)
	else if ((sphereID == 0x02 || sphereID == 0x0a) && Renderer.hasCustomSprite(stringformat("sphere_blue_size_%d", sphereSize16)))
	{
		key = stringformat("sphere_blue_size_%d", sphereSize16)
	}
	// Bumper
	else if (sphereID == 0x03 && Renderer.hasCustomSprite(stringformat("sphere_bumper_size_%d", sphereSize16)))
	{
		key = stringformat("sphere_bumper_size_%d", sphereSize16)
	}
	// Ring
	else if (sphereID == 0x04 && Renderer.hasCustomSprite(stringformat("sphere_ring_%d_size_%d", static_rings.animframe, sphereSize16)))
	{
		key = stringformat("sphere_ring_%d_size_%d", static_rings.animframe, sphereSize16)
	}
	// Yellow sphere
	else if (sphereID == 0x05 && Renderer.hasCustomSprite(stringformat("sphere_yellow_size_%d", sphereSize16)))
	{
		key = stringformat("sphere_yellow_size_%d", sphereSize16)
	}
	// Ring (collected, part 1)
	else if (sphereID == 0x06 && Renderer.hasCustomSprite("sphere_sparkle_0"))
	{
		key = "sphere_sparkle_0"
	}
	// Ring (collected, part 2)
	else if (sphereID == 0x07 && Renderer.hasCustomSprite("sphere_sparkle_1"))
	{
		key = "sphere_sparkle_1"
	}
	// Ring (collected, part 3)
	else if (sphereID == 0x08 && Renderer.hasCustomSprite("sphere_sparkle_2"))
	{
		key = "sphere_sparkle_2"
	}
	// Ring (collected, part 4)
	else if (sphereID == 0x09 && Renderer.hasCustomSprite("sphere_sparkle_3"))
	{
		key = "sphere_sparkle_3"
	}
	// Chaos and Super emerald
	else if ((sphereID == 0x0b || sphereID == 0x0d) && Renderer.hasCustomSprite(SpheresModSupport.getEmeraldSprite(sphereID, sphereSize16)))
	{
		key = SpheresModSupport.getEmeraldSprite(sphereID, sphereSize16)
	}
	// If the sprite does not exist, or there is no coincidence for sphereID, then try to draw the VDP sprite
	else
	{
		// If the modern style is used, then add fog for the spheres that are beyond the horizon. AIR part
		if (Game.getSetting(SETTING_BS_VISUAL_STYLE) & 0x02)
			Renderer.drawVdpSpriteWithTint(px + u16[A3 + 0x04], py + s8[A3], u8[A3 + 0x01], u16[A3 + 0x02] + D6.u16, renderQueue, (0xffffff - fog) + (u32(alpha) << 24), fog)
		else
			Renderer.drawVdpSprite(px + u16[A3 + 0x04], py + s8[A3], u8[A3 + 0x01], u16[A3 + 0x02] + D6.u16, renderQueue)
			
		// Finish the function on this
		return
	}
	
	// Draw a sprite if it exists
	Renderer.drawCustomSprite(key, px, py, 0x00, 0x00, renderQueue, 0x00, alpha)
}

// - - - - - - - - - - - - - - - - - - - //
// Custom HUD stuff				//
// - - - - - - - - - - - - - - - - - - - //

//? Render a custom Display HUD.
function void SpheresModSupport.renderHUD(u16 renderQueue)
{
	// Setup variables
	s32 distance = 0x70 // Distance between counters
	s32 px = getScreenWidth() / 0x02
	s32 py = 0x13
	
	// Call a counters
	SpheresModSupport.renderHUD_BlueCounter(px - distance, py, renderQueue)
	SpheresModSupport.renderHUD_RingsCounter(px + distance, py, renderQueue)
}

//? Render a custom Blue counter.
function void SpheresModSupport.renderHUD_BlueCounter(s32 px, s32 py, u16 renderQueue)
{
	s32 blue_counter = bluespheres.blue_remaining
	SpheresModSupport.renderHUD_Counter(px, py, renderQueue, "display_hud_bluecounter", blue_counter)
}

//? Render a custom Rings counter.
function void SpheresModSupport.renderHUD_RingsCounter(s32 px, s32 py, u16 renderQueue)
{
	s32 rings_counter = !(bluespheres.minigame_mode || Game.getSetting(SETTING_BS_COUNTDOWN_RINGS)) ? bluespheres.rings_collected : (bluespheres.rings_remaining >= 1000) ? 0x00 : bluespheres.rings_remaining
	SpheresModSupport.renderHUD_Counter(px, py, renderQueue, "display_hud_ringscounter", rings_counter)
}

//? Render substrate counter.
function void SpheresModSupport.renderHUD_Counter(s32 px, s32 py, u16 renderQueue, string counterKey, s32 number)
{
	// Draw numbers if all numbers exist
	if (SpheresModSupport.hasDigitSprites())
	{
		SpheresModSupport.renderHUD_Digit("display_hud_number_%d", number / 0x64, px - 0x10, py, renderQueue)
		SpheresModSupport.renderHUD_Digit("display_hud_number_%d", number / 0x0a, px, py, renderQueue)
		SpheresModSupport.renderHUD_Digit("display_hud_number_%d", number, px + 0x10, py, renderQueue)
	}
	
	// Draw counter if it exists
	if (Renderer.hasCustomSprite(counterKey))
		Renderer.drawCustomSprite(counterKey, px, py, 0x00, SPRITE_FLAG_PRIO, renderQueue)
}

//? Render of one character numbers with specified parameters.
function void SpheresModSupport.renderHUD_Digit(string stringMask, s32 number, s32 px, s32 py, u16 renderQueue)
{
	u8 digit = number % 0x0a
	Renderer.drawCustomSprite(stringformat(stringMask, digit), px, py, 0x00, SPRITE_FLAG_PRIO, renderQueue)
	number /= 0x0a
}