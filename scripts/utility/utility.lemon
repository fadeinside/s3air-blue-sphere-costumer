define u8 bluespheres.animation.sprite	= u8[A0 + 0x60]	// Character framerate animation
define u8 bluespheres.animation.state	= u8[A0 + 0x63]	// The current character state (0x00 - standing, 0x01 - run, and 0x02 - jump)

//@ Function taken from sonic3air_dev/scripts/level/special/bluespheres.lemon
//# address-hook(0x00903e) end(0x00919e)
function void fn00903e()
{
	// Call the base function
	base.fn00903e()
	
	// Character state
	bool character_idle = (objA0.animation.sprite == 0x01 && bluespheres.started_running == 0x00)
	bool character_walk = (objA0.animation.sprite <= 0x08 && ((bluespheres.started_running == 0x01) ? (objA0.animation.sprite >= 0x01) : (objA0.animation.sprite >= 0x02)))
	bool character_jump = (objA0.animation.sprite <= 0x0b && objA0.animation.sprite >= 0x09)
	
	// First frame
	D2 = 0x00
	
	// Character idle
	if (character_idle)
	{
		// Set character state
		bluespheres.animation.state = 0x00
		// Set frames
		bluespheres.animation.sprite = 0x00
	}
	// Character walk
	else if (character_walk)
	{
		// Set character state
		bluespheres.animation.state = 0x01
		// Set frames
		if (bluespheres.movement_speed != 0x00 && !(bluespheres.movement_speed < 0x00)) // If the speed of movement is not 0, and is not negative, then the speed of animations depends on the speed of movement
			u16[A0 + 0x60] += bluespheres.movement_speed >> 0x05
		else if (bluespheres.movement_speed < 0x00) // If negative, convert into positive
			u16[A0 + 0x60] += 0x00 - (bluespheres.movement_speed >> 0x05)
	}
	// Character jump
	else if (character_jump)
	{
		// Set character state
		bluespheres.animation.state = 0x02
		// Set frames
		if (bluespheres.movement_speed != 0x00 && !(bluespheres.movement_speed < 0x00)) // If the speed of movement is not 0, and is not negative, then the speed of animations depends on the speed of movement
			u16[A0 + 0x60] += bluespheres.movement_speed >> 0x05
		else if (bluespheres.movement_speed < 0x00) // If negative, convert into positive
			u16[A0 + 0x60] += 0x00 - (bluespheres.movement_speed >> 0x05)
		else // Otherwise use the speed set
			u16[A0 + 0x60] += 4096 >> 0x05
	}
	
	D2 = bluespheres.animation.sprite
	if (D2.u8 >= 0x0c)
		D2.u8 = 0x00
	
	bluespheres.animation.sprite = D2.u8
	
	//debugLog(stringformat("Character state: 0x%02x / %d, %d, %d", bluespheres.animation.state, character_idle, character_walk, character_jump))
	//debugLog(stringformat("Character frames: %d", bluespheres.animation.sprite))
	//debugLog(stringformat("Current movespeed: %d", bluespheres.movement_speed))
}

//@ Function taken from sonic3air_dev/scripts/level/special/bluespheres.lemon
//# address-hook(0x009402) end(0x009442)
function void fn009402()
{
	// Character state
	bool character_idle = (objA0.animation.sprite == 0x01 && bluespheres.started_running == 0x00)
	bool character_walk = (objA0.animation.sprite <= 0x08 && ((bluespheres.started_running == 0x01) ? (objA0.animation.sprite >= 0x01) : (objA0.animation.sprite >= 0x02)))
	bool character_jump = (objA0.animation.sprite <= 0x0b && objA0.animation.sprite >= 0x09)
	
	// First frame
	D2 = 0x00
	
	// Character idle
	if (character_idle)
	{
		// Set character state
		bluespheres.animation.state = 0x00
		// Set frames
		bluespheres.animation.sprite = 0x00
	}
	// Character walk
	else if (character_walk)
	{
		// Set character state
		bluespheres.animation.state = 0x01
		// Set frames
		if (bluespheres.movement_speed != 0x00 && !(bluespheres.movement_speed < 0x00)) // If the speed of movement is not 0, and is not negative, then the speed of animations depends on the speed of movement
			u16[A0 + 0x60] += bluespheres.movement_speed >> 0x05
		else if (bluespheres.movement_speed < 0x00) // If negative, convert into positive
			u16[A0 + 0x60] += 0x00 - (bluespheres.movement_speed >> 0x05)
	}
	// Character jump
	else if (character_jump)
	{
		// Set character state
		bluespheres.animation.state = 0x02
		// Set frames
		if (bluespheres.movement_speed != 0x00 && !(bluespheres.movement_speed < 0x00)) // If the speed of movement is not 0, and is not negative, then the speed of animations depends on the speed of movement
			u16[A0 + 0x60] += bluespheres.movement_speed >> 0x05
		else if (bluespheres.movement_speed < 0x00) // If negative, convert into positive
			u16[A0 + 0x60] += 0x00 - (bluespheres.movement_speed >> 0x05)
		else // Otherwise use the speed set
			u16[A0 + 0x60] += 4096 >> 0x05
	}
	
	D2 = bluespheres.animation.sprite
	if (D2.u8 >= 0x0c)
		D2.u8 = 0x00
	
	bluespheres.animation.sprite = D2.u8
	
	//debugLog(stringformat("Character state: 0x%02x / %d, %d, %d", bluespheres.animation.state, character_idle, character_walk, character_jump))
	//debugLog(stringformat("Character frames: %d", bluespheres.animation.sprite))
	//debugLog(stringformat("Current movespeed: %d", bluespheres.movement_speed))
	
	// Call the base function
	base.fn009402()
}

//@ Function taken from sonic3air_dev/scripts/level/special/bluespheres.lemon
//# address-hook(0x009488) end(0x0094d2)
function void fn009488()
{
	// Call the base function
	base.fn009488()
	
	// First frame
	D2 = 0x00
	
	// Set frames
	if (bluespheres.movement_speed != 0x00 && !(bluespheres.movement_speed < 0x00)) // If the speed of movement is not 0, and is not negative, then the speed of animations depends on the speed of movement
		u16[A0 + 0x60] += (bluespheres.movement_speed - (bluespheres.movement_speed >> 0x02)) >> 0x05
	else if (bluespheres.movement_speed < 0x00) // If negative, convert into positive
		u16[A0 + 0x60] += 0x00 - ((bluespheres.movement_speed - (bluespheres.movement_speed >> 0x02)) >> 0x05)
	else // Otherwise use the speed set
		u16[A0 + 0x60] += (4096 - (4096 >> 0x02)) >> 0x05
	
	D2 = bluespheres.animation.sprite
	if (D2.u8 >= 0x15)
		D2.u8 = 0x00
	
	bluespheres.animation.sprite = D2.u8
	
	//debugLog(stringformat("Character frames: %d", bluespheres.animation.sprite))
	//debugLog(stringformat("Current movespeed: %d", bluespheres.movement_speed))
	//debugLog(stringformat("Faded movespeed: %d", bluespheres.movement_speed >> 0x02))
}

//@ Function taken from sonic3air_dev/scripts/level/special/bluespheres.lemon
//# address-hook(0x008faa) end(0x009038)
function void fn008faa()
{
	base.fn008faa() // Call the base function
	objA0.value32 += getScreenHeight() - 224
}

//@ Function taken from sonic3air_dev/scripts/level/special/bluespheres.lemon
//# address-hook(0x00972e) end(0x0098ae)
function void fn00972e()
{
	A1 = 0xfffff100
	D0.u16 = ((bluespheres.position.x + 0x80) >> 8) & 0x1f
	D1.u16 = ((bluespheres.position.y + 0x80) >> 8) & 0x1f
	D1.u16 <<= 5
	D1.u8 |= D0.u8
	A1 += D1.s16
	D2.u8 = u8[A1]
	
	if (D2.u8 == 4)
	{
		D0.u16 = (bluespheres.position.x | bluespheres.position.y) & 0xe0
		if (D0.u16 == 0x00)
		{
			// Call the base function
			base.fn00972e()
		}
	}
	else
	{
		// Call the base function
		base.fn00972e()
	}
}