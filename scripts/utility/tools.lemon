//? Get the transparency value for some spheres during collecting.
function u8 SpheresModSupport.getOnCollectedAlpha(u8 sphereID)
{
	// Make some spheres transparent during collecting when modern style is used
	if (Game.getSetting(SETTING_BS_VISUAL_STYLE) & 0x02)
	{
		// 0x0a is blue sphere during collecting
		if (sphereID == 0x0a)
			return 0xa0
	}
	
	// Return default value
	return 0xff
}

//? Returns the emerald sprite key.
function string SpheresModSupport.getEmeraldSprite(u8 sphereID, u8 sphereSize16)
{
	// Use the stage number or algorithmic stage information to get the emerald color ID
	u8 emeraldColorID = !(bluespheres.minigame_mode) ? global.next_bluespheres : (u8[0xffffffa4] & 0x07)
	
	// Determine whether sphereID is a chaos emerald or not
	string emeraldType = (sphereID == 0x0b) ? "chaos" : "super"
	
	// Return sprite key
	return stringformat("emerald_%s_0x%02x_size_%d", emeraldType, emeraldColorID, sphereSize16)
}

//? Returns the sphere transformation, depending on its size. (The method of using 32 frames is smoother, but visually does not correspond to the perspective of the ground. It is recommended to use the 16 frames method). Used to transform the sphere size, depending on its size on the ground, as an example, the rings in Blue Spheres stages from Mania uses something similar.
function u32 SpheresModSupport.get2DTransformSize32(u8 sphereSize32)
{
	if (sphereSize32 == 0x1f)
		return 4096
	else if (sphereSize32 == 0x1e)
		return 6144
	else if (sphereSize32 == 0x1d)
		return 8192
	else if (sphereSize32 == 0x1c)
		return 10240
	else  if (sphereSize32 == 0x1b)
		return 12288
	else  if (sphereSize32 == 0x1a)
		return 14336
	else if (sphereSize32 == 0x19)
		return 16384
	else if (sphereSize32 == 0x18)
		return 18432
	else if (sphereSize32 == 0x17)
		return 20480
	else if (sphereSize32 == 0x16)
		return 22528
	else if (sphereSize32 == 0x15)
		return 24576
	else if (sphereSize32 == 0x14)
		return 26624
	else if (sphereSize32 == 0x13)
		return 28672
	else if (sphereSize32 == 0x12)
		return 30720
	else if (sphereSize32 == 0x11)
		return 32768
	else if (sphereSize32 == 0x10)
		return 34816
	else if (sphereSize32 == 0x0f)
		return 36864
	else if (sphereSize32 == 0x0e)
		return 38312
	else if (sphereSize32 == 0x0d)
		return 40960
	else if (sphereSize32 == 0x0c)
		return 43008
	else if (sphereSize32 == 0x0b)
		return 45056
	else if (sphereSize32 == 0x0a)
		return 47104
	else if (sphereSize32 == 0x09)
		return 49152
	else if (sphereSize32 == 0x08)
		return 51200
	else if (sphereSize32 == 0x07)
		return 53248
	else if (sphereSize32 == 0x06)
		return 55296
	else if (sphereSize32 == 0x05)
		return 57344
	else if (sphereSize32 == 0x04)
		return 59392
	else if (sphereSize32 == 0x03)
		return 61440
	else if (sphereSize32 == 0x02)
		return 63488
	else if (sphereSize32 == 0x01)
		return 64512
	else
		return 65536
}

//? Returns the sphere transformation, depending on its size. Used to transform the sphere size, depending on its size on the ground, as an example, the rings in Blue Spheres stages from Mania uses something similar.
function u32 SpheresModSupport.get2DTransformSize16(u8 sphereSize16)
{
	if (sphereSize16 == 0x0f)
		return 4096
	else if (sphereSize16 == 0x0e)
		return 8192
	else  if (sphereSize16 == 0x0d)
		return 12288
	else if (sphereSize16 == 0x0c)
		return 16384
	else if (sphereSize16 == 0x0b)
		return 20480
	else if (sphereSize16 == 0x0a)
		return 24576
	else if (sphereSize16 == 0x09)
		return 28672
	else if (sphereSize16 == 0x08)
		return 32768
	else if (sphereSize16 == 0x07)
		return 36864
	else if (sphereSize16 == 0x06)
		return 40960
	else if (sphereSize16 == 0x05)
		return 45056
	else if (sphereSize16 == 0x04)
		return 49152
	else if (sphereSize16 == 0x03)
		return 53248
	else if (sphereSize16 == 0x02)
		return 57344
	else if (sphereSize16 == 0x01)
		return 61440
	else
		return 0x10000
}

//? Returns the sphere size, expanded from 16 to 32 frames, depending on its distance. Thus, 0x00 - Large sphere size, since closer to the camera, 0x1f - Small sphere size, since it is farthest from the camera
function u8 SpheresModSupport.getSphereSize32(u16 sphereDistance)
{
	if (sphereDistance < 5952)
		return 0x1f
	else if (sphereDistance < 6128)
		return 0x1e
	else if (sphereDistance < 6304)
		return 0x1d
	else if (sphereDistance < 6488)
		return 0x1c
	else if (sphereDistance < 6672)
		return 0x1b
	else if (sphereDistance < 6864)
		return 0x1a
	else if (sphereDistance < 7056)
		return 0x19
	else if (sphereDistance < 7264)
		return 0x18
	else if (sphereDistance < 7472)
		return 0x17
	else if (sphereDistance < 7704)
		return 0x16
	else if (sphereDistance < 7936)
		return 0x15
	else if (sphereDistance < 8392)
		return 0x14
	else if (sphereDistance < 8448)
		return 0x13
	else if (sphereDistance < 8925)
		return 0x12
	else if (sphereDistance < 9003)
		return 0x11
	else if (sphereDistance < 9317)
		return 0x10
	else if (sphereDistance < 9632)
		return 0x0f
	else if (sphereDistance < 10112)
		return 0x0e
	else if (sphereDistance < 10592)
		return 0x0d
	else if (sphereDistance < 10992)
		return 0x0c
	else if (sphereDistance < 11392)
		return 0x0b
	else if (sphereDistance < 12032)
		return 0x0a
	else if (sphereDistance < 12672)
		return 0x09
	else if (sphereDistance < 13216)
		return 0x08
	else if (sphereDistance < 13760)
		return 0x07
	else if (sphereDistance < 14624)
		return 0x06
	else if (sphereDistance < 15488)
		return 0x05
	else if (sphereDistance < 16576)
		return 0x04
	else if (sphereDistance < 17664)
		return 0x03
	else if (sphereDistance < 18072)
		return 0x02
	else if (sphereDistance < 18381)
		return 0x01
	else
		return 0x00
}

//? Returns the sphere size, depending on its distance. Thus, 0x00 - Large sphere size, since closer to the camera, 0x0f - Small sphere size, since it is farthest from the camera
function u8 SpheresModSupport.getSphereSize16(u16 sphereDistance)
{
	if (sphereDistance < 5952)
		return 0x0f
	else if (sphereDistance < 6304)
		return 0x0e
	else if (sphereDistance < 6672)
		return 0x0d
	else if (sphereDistance < 7056)
		return 0x0c
	else if (sphereDistance < 7472)
		return 0x0b
	else if (sphereDistance < 7936)
		return 0x0a
	else if (sphereDistance < 8448)
		return 0x09
	else if (sphereDistance < 9003)
		return 0x08
	else if (sphereDistance < 9632)
		return 0x07
	else if (sphereDistance < 10592)
		return 0x06
	else if (sphereDistance < 11392)
		return 0x05
	else if (sphereDistance < 12672)
		return 0x04
	else if (sphereDistance < 13760)
		return 0x03
	else if (sphereDistance < 15488)
		return 0x02
	else if (sphereDistance < 17664)
		return 0x01
	else
		return 0x00
}

//? Check for all digit sprites (Used inside this mod just for optimization).
function bool SpheresModSupport.hasDigitSprites()
{
	// Check if the custom sprites exist
	if (Renderer.hasCustomSprite("display_hud_number_0") && Renderer.hasCustomSprite("display_hud_number_1") && Renderer.hasCustomSprite("display_hud_number_2") && Renderer.hasCustomSprite("display_hud_number_3") && Renderer.hasCustomSprite("display_hud_number_4") && Renderer.hasCustomSprite("display_hud_number_5") && Renderer.hasCustomSprite("display_hud_number_6") && Renderer.hasCustomSprite("display_hud_number_7") && Renderer.hasCustomSprite("display_hud_number_8") && Renderer.hasCustomSprite("display_hud_number_9"))
		return true
	
	// Return failsave value
	return false
}